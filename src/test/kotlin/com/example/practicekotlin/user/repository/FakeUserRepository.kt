package com.example.practicekotlin.user.repository

import com.example.practicekotlin.user.entity.UserEntity
import com.example.practicekotlin.user.service.UserRepository
import java.util.concurrent.atomic.AtomicLong

class FakeUserRepository : UserRepository {

    private val autoGeneratedId: AtomicLong = AtomicLong(0)
    private val users: ArrayList<UserEntity> = ArrayList()

    override fun create(user: UserEntity): UserEntity {
        if (user.id == null) {
            val saveUser = UserEntity(
                id = autoGeneratedId.incrementAndGet(),
                loginId = user.loginId,
                password = user.password,
            )
            users.add(saveUser)
            return saveUser
        }

        users.removeIf { u -> u.id == user.id }
        users.add(user)
        return user
    }

    override fun getUser(loginId: String): UserEntity {
        return users.stream()
            .filter { u -> u.loginId.equals(loginId) }
            .findFirst()
            .get()
    }

    override fun getUser(id: Long): UserEntity {
        return users.first { u -> u.id == id }
    }

    override fun getUsers(): List<UserEntity> {
        return users
    }
}
